{
  "name": "Strong resources",
  "tagline": "",
  "body": "### Getting Started\r\n\r\nAdd the mixin:\r\n\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  include StrongResources::Controller::Mixin\r\nend\r\n```\r\n\r\nDefine your resources:\r\n\r\n```ruby\r\n# config/initializers/strong_resources.rb\r\nStrongResources.configure do\r\n  strong_resource :person do\r\n    attribute :name, :string\r\n    attribute :age, :integer\r\n  end\r\n\r\n  strong_resource :pet do\r\n    attribute :name, :string\r\n    attribute :type, :string\r\n  end\r\nend\r\n```\r\n\r\nThese resources can now be references from your controller:\r\n\r\n```ruby\r\nclass PeopleController < ApplicationController\r\n  strong_resource :person do\r\n    has_many :pets, delete: true, destroy: true\r\n  end\r\n\r\n  def create\r\n    person = Person.new(strong_resource)\r\n    # code\r\n  end\r\nend\r\n```\r\n\r\nWe've now enabled\r\n\r\n* Strong params with type checking\r\n* Support for nested associations\r\n* Support for `_delete` and `_destroy` on `update` action\r\n\r\nMost importantly, this data can now be introspected for things like automatic documentation.\r\n\r\n### Customizing per-action\r\n\r\nLet's say a person's name can be created, but never changed:\r\n\r\n```ruby\r\nclass PeopleController < ApplicationController\r\n  strong_resource :person do\r\n    on :update do\r\n      remove_attribute :name\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Limit attribute set\r\n\r\nYou can use `only` and `except` to limit the accepted payloads:\r\n\r\n```ruby\r\nclass PeopleController < ApplicationController\r\n  strong_resource :person do\r\n    has_many :pets, only: [:type]\r\n  end\r\nend\r\n```\r\n\r\nNo error will be raised when excess parameters are supplied; they are silently dropped.\r\n\r\n### Delete/Destroy\r\n\r\nWe follow the pattern where the `_delete` parameter is for disassociation, the `_destroy` parameter is for deleting the associated resource as well as disassociating. Use `delete` and `destroy`:\r\n\r\n```ruby\r\nclass PeopleController < ApplicationController\r\n  strong_resource :person do\r\n    has_many :pets, delete: true, destroy: false\r\n  end\r\nend\r\n```\r\n\r\nThese will only be available on the `update` action. To customize, define your own `update_action?`:\r\n\r\n```ruby\r\ndef update_action?\r\n  %w(promote update).include?(action_name)\r\nend\r\n```\r\n\r\n### Relationships\r\n\r\nRelationships can be nested to any level:\r\n\r\n```ruby\r\nclass PeopleController < ApplicationController\r\n  strong_resource :person do\r\n    has_many :pets do\r\n      belongs_to :animal_family\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nIf a relationship name does not match the strong resource name, use `resource`:\r\n\r\n```ruby\r\nclass PeopleController < ApplicationController\r\n  strong_resource :person do\r\n    has_many :pets, resource: :animal\r\n  end\r\nend\r\n```\r\n\r\n### Conditional Attributes\r\n\r\nLet's say only admins can change a person's age:\r\n\r\n```ruby\r\n# config/initializers/strong_resources.rb\r\nstrong_resource :person do\r\n  attribute :age, :integer, if: ->(controller) { controller.current_user.admin? }\r\nend\r\n```\r\n\r\n### Custom Types\r\n\r\nDefine a custom type by giving its internal name, stronger_parameters type, and swagger type:\r\n\r\n```ruby\r\n# config/initializers/strong_resources.rb\r\nParameters = ActionController::Parameters\r\nstrong_param :pet_type, swagger: :string, type: Parameters.enum('Dog', 'Cat')\r\n\r\nstrong_resource :pet do\r\n  attribute :type, :pet_type\r\nend\r\n```\r\n\r\nThis will adhere to `ActionController::Parameters.action_on_invalid_parameters` defined by stronger_parameters.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}